#!/usr/bin/env python


import sys
import argparse
from pathlib import Path
from tempfile import NamedTemporaryFile, TemporaryDirectory
from bandcampsync import logger, bandcamp, media, version
from bandcampsync.download import download_file, unzip_file, move_file


log = logger.get_logger('sync')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='bandcampsync',
        description='Syncs media purcahsed on bandcamp.com with a local directory',
    )
    parser.add_argument('-v', '--version', action='store_true',
        help='Displays the bandcampsync version and exits')
    parser.add_argument('-c', '--cookies', required=True,
        help='Path to the cookies file')
    parser.add_argument('-d', '--directory', required=True,
        help='Path to the directory to download media to')
    parser.add_argument('-f', '--format', default='flac',
        help='Media format to download, defaults to "flac"')
    args = parser.parse_args()
    if args.version:
        print(f'BandcampSync version: {version}', file=sys.stdout)
        sys.exit(0)
    cookies_path = Path(args.cookies).resolve()
    dir_path = Path(args.directory).resolve()
    media_format = args.format
    if not cookies_path.is_file():
        raise ValueError(f'Cookies file does not exist: {cookies_path}')
    if not dir_path.is_dir():
        raise ValueError(f'Directory does not exist: {dir_path}')
    log.info(f'BandcampSync v{version} starting')
    with open(cookies_path, 'rt') as f:
        cookies = f.read().strip()
    log.info(f'Loaded cookies from "{cookies_path}"')
    local_media = media.LocalMedia(media_dir=dir_path)
    bandcamp = bandcamp.Bandcamp(cookies=cookies)
    bandcamp.verify_authentication()
    bandcamp.load_purchases()
    for purchase in bandcamp.purchases:
        item_id = purchase['item_id']
        band_name = purchase['band_name']
        title = purchase['item_title']
        if local_media.is_locally_downloaded(item_id):
            log.info(f'Already locally downloaded, skipping: {band_name} / {title} (id:{item_id})')
            continue
        else:
            log.info(f'New media item, downloading: {band_name} / {title} (id:{item_id})')
            download_url = bandcamp.load_download_url(purchase)
            if not download_url:
                log.error(f'Failed to find download URL for: {item_id}')
                continue
            local_path = local_media.get_path_for_purchase(purchase)
            with NamedTemporaryFile(mode='w+b', delete=True, suffix='.zip') as temp_zip_file:
                log.info(f'Downloading item {band_name} / {title} (id:{item_id}) '
                         f'from {download_url} to {temp_zip_file.name}')
                download_file(download_url, temp_zip_file)
                temp_zip_file.seek(0)
                with TemporaryDirectory() as temp_dir:
                    log.info(f'Decompressing downloaded zip {temp_zip_file.name} to {temp_dir}')
                    unzip_file(temp_zip_file.name, temp_dir)
                    temp_path = Path(temp_dir)
                    for file_path in temp_path.iterdir():
                        if not local_path.is_dir():
                            local_path.mkdir(parents=True)
                        file_dest = local_path / file_path.name
                        log.info(f'Moving extracted file: "{file_path}" to "{file_dest}"')
                        move_file(file_path, file_dest)
                log.info(f'Writing bandcamp item id to: {local_path}')
                local_media.write_bandcamp_id(item_id, local_path)
    bandcamp.refresh_cookes(cookies_path)
    log.info(f'Done')
